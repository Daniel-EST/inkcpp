name: build
on: 
  push: 
    branches: 
      - master
  pull_request:

env:
  BUILD_TYPE: release

jobs:
  compilation:
    name: Compilation and Unit Tests
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        include:
          - os: macos-latest
            artifact: macos
            inklecate_url: https://github.com/inkle/ink/releases/download/0.9.0/inklecate_mac.zip
          - os: windows-latest
            artifact: win64
            inklecate_url: https://github.com/inkle/ink/releases/download/0.9.0/inklecate_windows_and_linux.zip
          - os: "ubuntu-20.04"
            artifact: linux
            inklecate_url: https://github.com/inkle/ink/releases/download/0.9.0/inklecate_windows_and_linux.zip
            inklecate_pre: "mono "
            inklecate_post: ".exe"

    steps:

    # Checkout project
    - uses: actions/checkout@v2

    # Download inklecate
    - uses: suisei-cn/actions-download-file@v1
      name: Download Inklecate 
      id: download_inklecate 
      with:
        url: ${{ matrix.inklecate_url }}
        target: "inklecate/"

    # Install Inklecate
    - name: Deploy Inkelcate 
      shell: bash
      run: |
        cd inklecate
        unzip *.zip
        echo "INKLECATE=${{ matrix.inklecate_pre }}$GITHUB_WORKSPACE/inklecate/inklecate${{ matrix.inklecate_post }}" >> $GITHUB_ENV

    # Create a build directory to store all the CMake generated files
    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    # Run CMake configuration to create build files
    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    # Build using CMake and OS toolkit
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    # Run CMake tests (unit tests, etc.)
    - name: CTests
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ctest . -C $BUILD_TYPE -V

    # Copy all build artifacts to the bin directory
    - name: Install
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --install . --config $BUILD_TYPE --prefix bin

    # Upload bin directory as artifact
    - name: Upload Artifacts
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.artifact }}
        path: build/bin/

  # Run Ink Proof and Generate a GitHub page
  ink-proof:
    name: Ink Proof Testing
    needs: compilation
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        include:
          - os: macos-latest
            artifact: macos
            install: brew install jq
          - os: windows-latest
            artifact: win64
            install: chocolatey install jq
          - os: "ubuntu-20.04"
            artifact: linux
            install: sudo apt-get install jq

    steps:
      # Checkout project with submodules
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Download build result from previous step
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact }}
          path: build

      # Setup python
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          
      # Setup JQ
      - name: Setup JQ
        shell: bash
        run: ${{ matrix.install }}

      # Run ink proof
      - name: Build Ink Proof Website
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/proofing/ink-proof
          python3 install_deps.py
          cp ../inkcpp_runtime_driver drivers/
          chmod +x drivers/inkcpp_runtime_driver
          mkdir deps/inkcpp
          cp $GITHUB_WORKSPACE/build/bin/* deps/inkcpp/
          chmod +x deps/inkcpp/inkcpp_cl
          python3 proof.py --examples 'I0..' inkcpp inklecate_v0.9.0 --reference-runtime inkcpp
          
      - name: Summarize Results
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/proofing/ink-proof/out
          SUCCESSES=$(jp "[.results[] | select(.status=="SUCCESS" and .program == "inkcpp")] | length" summary.json)
          TOTAL=$(jp "[.results[] | select(.program == "inkcpp")] | length" summary.json)
          echo "$SUCCESSES / $TOTAL"
